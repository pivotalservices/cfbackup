// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/pivotalservices/cfbackup"
)

type FakeBosh struct {
	GetInfoStub        func() (io.ReadCloser, error)
	getInfoMutex       sync.RWMutex
	getInfoArgsForCall []struct{}
	getInfoReturns     struct {
		result1 io.ReadCloser
		result2 error
	}
	getInfoReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	GetCloudControllerVMSetStub        func(name string) (io.ReadCloser, error)
	getCloudControllerVMSetMutex       sync.RWMutex
	getCloudControllerVMSetArgsForCall []struct {
		name string
	}
	getCloudControllerVMSetReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getCloudControllerVMSetReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	GetDeploymentManifestStub        func(deploymentName string) (io.ReadCloser, error)
	getDeploymentManifestMutex       sync.RWMutex
	getDeploymentManifestArgsForCall []struct {
		deploymentName string
	}
	getDeploymentManifestReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getDeploymentManifestReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	ChangeJobStateStub        func(string, string, string, int) (int, error)
	changeJobStateMutex       sync.RWMutex
	changeJobStateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 int
	}
	changeJobStateReturns struct {
		result1 int
		result2 error
	}
	changeJobStateReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	RetrieveTaskStatusStub        func(int) (*cfbackup.Task, error)
	retrieveTaskStatusMutex       sync.RWMutex
	retrieveTaskStatusArgsForCall []struct {
		arg1 int
	}
	retrieveTaskStatusReturns struct {
		result1 *cfbackup.Task
		result2 error
	}
	retrieveTaskStatusReturnsOnCall map[int]struct {
		result1 *cfbackup.Task
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBosh) GetInfo() (io.ReadCloser, error) {
	fake.getInfoMutex.Lock()
	ret, specificReturn := fake.getInfoReturnsOnCall[len(fake.getInfoArgsForCall)]
	fake.getInfoArgsForCall = append(fake.getInfoArgsForCall, struct{}{})
	fake.recordInvocation("GetInfo", []interface{}{})
	fake.getInfoMutex.Unlock()
	if fake.GetInfoStub != nil {
		return fake.GetInfoStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInfoReturns.result1, fake.getInfoReturns.result2
}

func (fake *FakeBosh) GetInfoCallCount() int {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	return len(fake.getInfoArgsForCall)
}

func (fake *FakeBosh) GetInfoReturns(result1 io.ReadCloser, result2 error) {
	fake.GetInfoStub = nil
	fake.getInfoReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) GetInfoReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.GetInfoStub = nil
	if fake.getInfoReturnsOnCall == nil {
		fake.getInfoReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getInfoReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) GetCloudControllerVMSet(name string) (io.ReadCloser, error) {
	fake.getCloudControllerVMSetMutex.Lock()
	ret, specificReturn := fake.getCloudControllerVMSetReturnsOnCall[len(fake.getCloudControllerVMSetArgsForCall)]
	fake.getCloudControllerVMSetArgsForCall = append(fake.getCloudControllerVMSetArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetCloudControllerVMSet", []interface{}{name})
	fake.getCloudControllerVMSetMutex.Unlock()
	if fake.GetCloudControllerVMSetStub != nil {
		return fake.GetCloudControllerVMSetStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudControllerVMSetReturns.result1, fake.getCloudControllerVMSetReturns.result2
}

func (fake *FakeBosh) GetCloudControllerVMSetCallCount() int {
	fake.getCloudControllerVMSetMutex.RLock()
	defer fake.getCloudControllerVMSetMutex.RUnlock()
	return len(fake.getCloudControllerVMSetArgsForCall)
}

func (fake *FakeBosh) GetCloudControllerVMSetArgsForCall(i int) string {
	fake.getCloudControllerVMSetMutex.RLock()
	defer fake.getCloudControllerVMSetMutex.RUnlock()
	return fake.getCloudControllerVMSetArgsForCall[i].name
}

func (fake *FakeBosh) GetCloudControllerVMSetReturns(result1 io.ReadCloser, result2 error) {
	fake.GetCloudControllerVMSetStub = nil
	fake.getCloudControllerVMSetReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) GetCloudControllerVMSetReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.GetCloudControllerVMSetStub = nil
	if fake.getCloudControllerVMSetReturnsOnCall == nil {
		fake.getCloudControllerVMSetReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getCloudControllerVMSetReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) GetDeploymentManifest(deploymentName string) (io.ReadCloser, error) {
	fake.getDeploymentManifestMutex.Lock()
	ret, specificReturn := fake.getDeploymentManifestReturnsOnCall[len(fake.getDeploymentManifestArgsForCall)]
	fake.getDeploymentManifestArgsForCall = append(fake.getDeploymentManifestArgsForCall, struct {
		deploymentName string
	}{deploymentName})
	fake.recordInvocation("GetDeploymentManifest", []interface{}{deploymentName})
	fake.getDeploymentManifestMutex.Unlock()
	if fake.GetDeploymentManifestStub != nil {
		return fake.GetDeploymentManifestStub(deploymentName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDeploymentManifestReturns.result1, fake.getDeploymentManifestReturns.result2
}

func (fake *FakeBosh) GetDeploymentManifestCallCount() int {
	fake.getDeploymentManifestMutex.RLock()
	defer fake.getDeploymentManifestMutex.RUnlock()
	return len(fake.getDeploymentManifestArgsForCall)
}

func (fake *FakeBosh) GetDeploymentManifestArgsForCall(i int) string {
	fake.getDeploymentManifestMutex.RLock()
	defer fake.getDeploymentManifestMutex.RUnlock()
	return fake.getDeploymentManifestArgsForCall[i].deploymentName
}

func (fake *FakeBosh) GetDeploymentManifestReturns(result1 io.ReadCloser, result2 error) {
	fake.GetDeploymentManifestStub = nil
	fake.getDeploymentManifestReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) GetDeploymentManifestReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.GetDeploymentManifestStub = nil
	if fake.getDeploymentManifestReturnsOnCall == nil {
		fake.getDeploymentManifestReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getDeploymentManifestReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) ChangeJobState(arg1 string, arg2 string, arg3 string, arg4 int) (int, error) {
	fake.changeJobStateMutex.Lock()
	ret, specificReturn := fake.changeJobStateReturnsOnCall[len(fake.changeJobStateArgsForCall)]
	fake.changeJobStateArgsForCall = append(fake.changeJobStateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ChangeJobState", []interface{}{arg1, arg2, arg3, arg4})
	fake.changeJobStateMutex.Unlock()
	if fake.ChangeJobStateStub != nil {
		return fake.ChangeJobStateStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.changeJobStateReturns.result1, fake.changeJobStateReturns.result2
}

func (fake *FakeBosh) ChangeJobStateCallCount() int {
	fake.changeJobStateMutex.RLock()
	defer fake.changeJobStateMutex.RUnlock()
	return len(fake.changeJobStateArgsForCall)
}

func (fake *FakeBosh) ChangeJobStateArgsForCall(i int) (string, string, string, int) {
	fake.changeJobStateMutex.RLock()
	defer fake.changeJobStateMutex.RUnlock()
	return fake.changeJobStateArgsForCall[i].arg1, fake.changeJobStateArgsForCall[i].arg2, fake.changeJobStateArgsForCall[i].arg3, fake.changeJobStateArgsForCall[i].arg4
}

func (fake *FakeBosh) ChangeJobStateReturns(result1 int, result2 error) {
	fake.ChangeJobStateStub = nil
	fake.changeJobStateReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) ChangeJobStateReturnsOnCall(i int, result1 int, result2 error) {
	fake.ChangeJobStateStub = nil
	if fake.changeJobStateReturnsOnCall == nil {
		fake.changeJobStateReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.changeJobStateReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) RetrieveTaskStatus(arg1 int) (*cfbackup.Task, error) {
	fake.retrieveTaskStatusMutex.Lock()
	ret, specificReturn := fake.retrieveTaskStatusReturnsOnCall[len(fake.retrieveTaskStatusArgsForCall)]
	fake.retrieveTaskStatusArgsForCall = append(fake.retrieveTaskStatusArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("RetrieveTaskStatus", []interface{}{arg1})
	fake.retrieveTaskStatusMutex.Unlock()
	if fake.RetrieveTaskStatusStub != nil {
		return fake.RetrieveTaskStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.retrieveTaskStatusReturns.result1, fake.retrieveTaskStatusReturns.result2
}

func (fake *FakeBosh) RetrieveTaskStatusCallCount() int {
	fake.retrieveTaskStatusMutex.RLock()
	defer fake.retrieveTaskStatusMutex.RUnlock()
	return len(fake.retrieveTaskStatusArgsForCall)
}

func (fake *FakeBosh) RetrieveTaskStatusArgsForCall(i int) int {
	fake.retrieveTaskStatusMutex.RLock()
	defer fake.retrieveTaskStatusMutex.RUnlock()
	return fake.retrieveTaskStatusArgsForCall[i].arg1
}

func (fake *FakeBosh) RetrieveTaskStatusReturns(result1 *cfbackup.Task, result2 error) {
	fake.RetrieveTaskStatusStub = nil
	fake.retrieveTaskStatusReturns = struct {
		result1 *cfbackup.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) RetrieveTaskStatusReturnsOnCall(i int, result1 *cfbackup.Task, result2 error) {
	fake.RetrieveTaskStatusStub = nil
	if fake.retrieveTaskStatusReturnsOnCall == nil {
		fake.retrieveTaskStatusReturnsOnCall = make(map[int]struct {
			result1 *cfbackup.Task
			result2 error
		})
	}
	fake.retrieveTaskStatusReturnsOnCall[i] = struct {
		result1 *cfbackup.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	fake.getCloudControllerVMSetMutex.RLock()
	defer fake.getCloudControllerVMSetMutex.RUnlock()
	fake.getDeploymentManifestMutex.RLock()
	defer fake.getDeploymentManifestMutex.RUnlock()
	fake.changeJobStateMutex.RLock()
	defer fake.changeJobStateMutex.RUnlock()
	fake.retrieveTaskStatusMutex.RLock()
	defer fake.retrieveTaskStatusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBosh) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfbackup.Bosh = new(FakeBosh)
